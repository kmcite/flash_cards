// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'domain/models/flash_card.dart';
import 'domain/models/flash_group.dart';
import 'domain/models/question.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 84850359796269996),
      name: 'Question',
      lastPropertyId: const obx_int.IdUid(6, 1400810461537101369),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6208944414517923868),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1454927117304954280),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9217452805600646609),
            name: 'a',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1401095920264407523),
            name: 'b',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3823985856034711523),
            name: 'c',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1400810461537101369),
            name: 'd',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 3646660773479372676),
      name: 'FlashGroup',
      lastPropertyId: const obx_int.IdUid(2, 6023593771146563861),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4089420850889145394),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6023593771146563861),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 3483428282455946494),
            name: 'flashCards',
            targetId: const obx_int.IdUid(3, 2749995367322559766))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 2749995367322559766),
      name: 'FlashCard',
      lastPropertyId: const obx_int.IdUid(4, 2466623829881858509),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1902443553055411551),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4803080330660303882),
            name: 'explaination',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5263020941117972455),
            name: 'question',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2466623829881858509),
            name: 'answer',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 8368864071820430498),
            name: 'flashGroups',
            targetId: const obx_int.IdUid(2, 3646660773479372676))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 2749995367322559766),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(2, 3483428282455946494),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Question: obx_int.EntityDefinition<Question>(
        model: _entities[0],
        toOneRelations: (Question object) => [],
        toManyRelations: (Question object) => {},
        getId: (Question object) => object.id,
        setId: (Question object, int id) {
          object.id = id;
        },
        objectToFB: (Question object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final aOffset = fbb.writeString(object.a);
          final bOffset = fbb.writeString(object.b);
          final cOffset = fbb.writeString(object.c);
          final dOffset = fbb.writeString(object.d);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, aOffset);
          fbb.addOffset(3, bOffset);
          fbb.addOffset(4, cOffset);
          fbb.addOffset(5, dOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Question()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..title = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..a = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..b = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..c = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..d = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '');

          return object;
        }),
    FlashGroup: obx_int.EntityDefinition<FlashGroup>(
        model: _entities[1],
        toOneRelations: (FlashGroup object) => [],
        toManyRelations: (FlashGroup object) => {
              obx_int.RelInfo<FlashGroup>.toMany(2, object.id):
                  object.flashCards
            },
        getId: (FlashGroup object) => object.id,
        setId: (FlashGroup object, int id) {
          object.id = id;
        },
        objectToFB: (FlashGroup object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FlashGroup()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '');
          obx_int.InternalToManyAccess.setRelInfo<FlashGroup>(object.flashCards,
              store, obx_int.RelInfo<FlashGroup>.toMany(2, object.id));
          return object;
        }),
    FlashCard: obx_int.EntityDefinition<FlashCard>(
        model: _entities[2],
        toOneRelations: (FlashCard object) => [],
        toManyRelations: (FlashCard object) => {
              obx_int.RelInfo<FlashCard>.toMany(1, object.id):
                  object.flashGroups
            },
        getId: (FlashCard object) => object.id,
        setId: (FlashCard object, int id) {
          object.id = id;
        },
        objectToFB: (FlashCard object, fb.Builder fbb) {
          final explainationOffset = fbb.writeString(object.explaination);
          final questionOffset = fbb.writeString(object.question);
          final answerOffset = fbb.writeString(object.answer);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, explainationOffset);
          fbb.addOffset(2, questionOffset);
          fbb.addOffset(3, answerOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FlashCard()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..explaination = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..question = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..answer = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '');
          obx_int.InternalToManyAccess.setRelInfo<FlashCard>(object.flashGroups,
              store, obx_int.RelInfo<FlashCard>.toMany(1, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Question] entity fields to define ObjectBox queries.
class Question_ {
  /// See [Question.id].
  static final id =
      obx.QueryIntegerProperty<Question>(_entities[0].properties[0]);

  /// See [Question.title].
  static final title =
      obx.QueryStringProperty<Question>(_entities[0].properties[1]);

  /// See [Question.a].
  static final a =
      obx.QueryStringProperty<Question>(_entities[0].properties[2]);

  /// See [Question.b].
  static final b =
      obx.QueryStringProperty<Question>(_entities[0].properties[3]);

  /// See [Question.c].
  static final c =
      obx.QueryStringProperty<Question>(_entities[0].properties[4]);

  /// See [Question.d].
  static final d =
      obx.QueryStringProperty<Question>(_entities[0].properties[5]);
}

/// [FlashGroup] entity fields to define ObjectBox queries.
class FlashGroup_ {
  /// See [FlashGroup.id].
  static final id =
      obx.QueryIntegerProperty<FlashGroup>(_entities[1].properties[0]);

  /// See [FlashGroup.name].
  static final name =
      obx.QueryStringProperty<FlashGroup>(_entities[1].properties[1]);

  /// see [FlashGroup.flashCards]
  static final flashCards =
      obx.QueryRelationToMany<FlashGroup, FlashCard>(_entities[1].relations[0]);
}

/// [FlashCard] entity fields to define ObjectBox queries.
class FlashCard_ {
  /// See [FlashCard.id].
  static final id =
      obx.QueryIntegerProperty<FlashCard>(_entities[2].properties[0]);

  /// See [FlashCard.explaination].
  static final explaination =
      obx.QueryStringProperty<FlashCard>(_entities[2].properties[1]);

  /// See [FlashCard.question].
  static final question =
      obx.QueryStringProperty<FlashCard>(_entities[2].properties[2]);

  /// See [FlashCard.answer].
  static final answer =
      obx.QueryStringProperty<FlashCard>(_entities[2].properties[3]);

  /// see [FlashCard.flashGroups]
  static final flashGroups =
      obx.QueryRelationToMany<FlashCard, FlashGroup>(_entities[2].relations[0]);
}
